<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kwanhur&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/e3b2d60098a21065bf53abfb56968f72</icon>
  <subtitle>Focus on NFV SDN and DevOps</subtitle>
  <link href="/kwanhur.github.io/atom.xml" rel="self"/>
  
  <link href="https://kwanhur.com/"/>
  <updated>2022-05-16T12:03:04.600Z</updated>
  <id>https://kwanhur.com/</id>
  
  <author>
    <name>kwanhur</name>
    <email>huang_hua2012@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenStack 系列（网络）简单概念</title>
    <link href="https://kwanhur.com/2022/05/16/openstack-networking-concepts/"/>
    <id>https://kwanhur.com/2022/05/16/openstack-networking-concepts/</id>
    <published>2022-05-16T11:58:59.000Z</published>
    <updated>2022-05-16T12:03:04.600Z</updated>
    
    <content type="html"><![CDATA[<!--  ~ Copyright 2022 kwanhur  ~  ~ Licensed under the Apache License, Version 2.0 (the "License");  ~ you may not use this file except in compliance with the License.  ~ You may obtain a copy of the License at  ~  ~ http://www.apache.org/licenses/LICENSE-2.0  ~  ~ Unless required by applicable law or agreed to in writing, software  ~ distributed under the License is distributed on an "AS IS" BASIS,  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ~ See the License for the specific language governing permissions and  ~ limitations under the License.  ~--><blockquote><p>本篇博文翻译自 OpenStack 官网 <a href="https://docs.openstack.org/neutron/latest/install/concepts.html">^1</a></p></blockquote><p>讲解 OpenStack 网络基本概念</p><span id="more"></span><p>OpenStack 网络（neutron）管理着 OpenStack 环境的虚拟网络基础设施（VNI：Virtual Networking Infrastruce）所有网络方面，以及物理网络基础设施（PNI：Physical Networking Infrastructure）访问层面。OpenStack 网络支持租户创建高级的虚拟网络特性，诸如防火墙、虚拟个人网络（VPN）。</p><p>网络编排支持网络、子网和路由器等对象的抽象。每种抽象都能在功能性上都能类比于物理部分，网络包含子网，路由器能在不同子网和网络间引导流量。</p><p>任何已知网络都会安装至少一个外部网络。不像其它网络，这外部网络不仅仅是一个虚拟化定义的网络。反而，它表示一个进入一系列物理网络，访问 OpenStack 外部网络的视角。</p><p>相对于外部网络，任何联网都是有不止一个内部网络。这些软件定义的网络让虚机直接连接。当然，只有当虚机在任何内部网络或子网通过网络接口类似路由器连接，才能真正通过网络连接访问虚机。</p><p>要想在网络外部去访问虚机，各网络间的路由器是必需的。每个路由器都会有一个网关能连接外部网络及一个甚至更多网络接口连接内部网络。就像物理路由器，同一路由器下不同子网的机器能互访，机器也能通过路由器的网关访问外部网络。</p><p>另外，你可以分配 IP 地址给内部、外部网络的指定端口上。实现子网互联的连接点称为端口。你可以关联外部网络 IP 地址到连接虚机的端口上。通过这种方式，外部网络即可访问虚机。</p><p>网络同样支持安全组。安全组支持管理员以分组方式定义防火墙规则。一台虚机可以属于一个甚至多个安全组，在安全组里应用规则能阻止或放开虚机的指定端口、端口列表或流量类型。</p><p>网络中每个插件都有相应的概念。相比运营 VNI 和 OpenStack 环境，理解这些概念帮助组装网络反而更显重要。所有的网络安装步骤都是采用核心插件和安全组插件（或无需操作）。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--
  ~ Copyright 2022 kwanhur
  ~
  ~ Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
--&gt;


&lt;blockquote&gt;
&lt;p&gt;本篇博文翻译自 OpenStack 官网 &lt;a href=&quot;https://docs.openstack.org/neutron/latest/install/concepts.html&quot;&gt;^1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;讲解 OpenStack 网络基本概念&lt;/p&gt;
    
    </summary>
    
    
      <category term="openstack" scheme="https://kwanhur.com/tags/openstack/"/>
    
      <category term="network" scheme="https://kwanhur.com/tags/network/"/>
    
      <category term="neutron" scheme="https://kwanhur.com/tags/neutron/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 系列（架构篇 3）- 高可用</title>
    <link href="https://kwanhur.com/2022/05/14/openstack-arch-high-availability/"/>
    <id>https://kwanhur.com/2022/05/14/openstack-arch-high-availability/</id>
    <published>2022-05-14T07:10:28.000Z</published>
    <updated>2022-05-15T09:22:28.390Z</updated>
    
    <content type="html"><![CDATA[<!--  ~ Copyright 2022 kwanhur  ~  ~ Licensed under the Apache License, Version 2.0 (the "License");  ~ you may not use this file except in compliance with the License.  ~ You may obtain a copy of the License at  ~  ~ http://www.apache.org/licenses/LICENSE-2.0  ~  ~ Unless required by applicable law or agreed to in writing, software  ~ distributed under the License is distributed on an "AS IS" BASIS,  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ~ See the License for the specific language governing permissions and  ~ limitations under the License.  ~--><blockquote><p>本篇文章内容翻译自 OpenStack 官网 [^1]。</p></blockquote><p>以下将从五个方面剖析高可用的需求。</p><span id="more"></span><h2 id="数据平面和控制平面"><a href="#数据平面和控制平面" class="headerlink" title="数据平面和控制平面"></a>数据平面和控制平面</h2><p>在设计一个 OpenStack 云平台时，认真考虑 SLA 潜在需求是非常重要的。包括核心服务需要维护好各种资源实例的高可用，涵盖计算、网络、存储以及额外运行在这些资源之上的实例。这些服务里通常可认为是数据平面的服务，并且是一直在线可用的。</p><p>其他服务，比如 CRUD（创建、读取、更新、删除）操作、度量、监控等，通常当做控制平面。SLA 更可能说明这些服务较低的持续运行时长。</p><p>组成 OpenStack 云平台的服务列表会有大量的需求，你需要考虑如何满足 SLA 每一条条款。例如，为了能提供计算服务，最少量的存储、消息队列和数据库服务，以及它们之间的网络服务需同步支持。</p><p>如果数据平面和控制平面是逻辑和物理隔离的，持续维护将会更加简单。例如，重启一个控制器就有可能不会影响到客户。如果一个服务失败影响到整个服务器的操作，控制平面和数据平面的隔离要能快速维护并且控制少影响到客户的操作。</p><h2 id="消除单点故障"><a href="#消除单点故障" class="headerlink" title="消除单点故障"></a>消除单点故障</h2><p>OpenStack 部署高可用方式至少需要 2 个可用节点。可以运行所有依赖的服务，包括消息队列服务（如 RabbitMQ 或 QPID）和数据库服务（如 MySQL 或 MariaDB）。正如云上服务都是可扩展的，后端服务同样需能扩展。监控和报告服务器可用率和响应耗时，以及系统负载，能帮助做决策扩展。</p><p>OpenStack 服务应该部署在多服务器上，以规避单点故障。为确保可用性，OpenStack 服务在负载均衡器后提供多节点实例。</p><p>同样有一小部分 OpenStack 服务只能运行在一处地方（比如 ceilometer-agent-central 服务）。为了防止服务单点故障，可以通过集群软件（如 Pacemaker）管理。</p><p>在 OpenStack 里，提供服务的基础设施应该通常可用，尤其承诺了 SLA。设计网络架构时，要确保网络可用性，以确保不存在故障单点。考虑到大规模交换、路由和冗余电力在这核心基础设施，同样关联性组合网络来提供多样性路由来保障高可用的交换设施。</p><p>设计网络功能时一定要加之谨慎。现在，OpenStack 支持了延迟网络（nova-network）系统和新一代可扩展的 OpenStack 网络（neutron）。OpenStack 网络和延迟网络各自有优缺点。他们同样使用和支持不同的网络部署模型，参考<a href="https://docs.openstack.org/ops-guide/arch_network_design.html#network-topology">指引</a>。</p><p>当使用网络服务是，OpenStack 控制器节点或分开的网络节点处理路由转发，除非路由模式选择了动态虚拟路由器。在控制器节点上运行路由服务，混合了数据和控制平面，可能导致复杂的性能问题及定位。更有能使用第三方软件和外部应用来帮助运维高可用的三层路由。这样允许更通用的应用控制网络硬件，或者以安全的方式提供复杂多层次的 web 应用。这种场景，交换设施一定要支持三层路由。</p><p>应用架构设计一定要适应云平台底层基础设施的能力。如果计算节点没提供无损的在线迁移能力，那它一定会遇上当一个计算节点故障，在上面的实例和本地数据被同步删除。然而，提供用户期望实例可长期运行的，基础设施一定要以消除任何故障单点的方式进行部署。这方式包括使用企业级存储的共享文件系统，或者 OpenStack 块存储来满足服务特性需求。</p><p>如果设计存储包括共享方式访问集中式存储，确保它设计时规避故障单点，以满足数据平面 SLA 需求甚至更优解。</p><h2 id="多地域设计中消除单点故障"><a href="#多地域设计中消除单点故障" class="headerlink" title="多地域设计中消除单点故障"></a>多地域设计中消除单点故障</h2><p>部分服务通常是在多地域间共享，包括身份认证服务和网站面板。在这场景中，很有必要确认服务的数据库是复制的，且在单地域缺失时能跨站点被多节点访问。</p><p>在各站点间，应该部署多网络链路来为所有组件提供冗余性。这包括存储副本，它能被指定网络或具备 QoS VLAN 隔离，来控制这复制流量或者为这些流量提供优先级管理。</p><p>如果多于一个站点的设计缺乏协作的，在所有站点维护对象可用性的能力就受到对象存储设计和实现的潜在影响。多站点间的 WAN 网络设计同样需要深层次考虑。</p><p>如果应用是运行在云平台内并非云驱动的，应该要有清晰的衡量指标和期望值来明确基础设施能做到和不能做到的地方。例如在各站点间进行的共享存储。很可能原生 OpenStack 并不支持，需要第三方硬件厂商来满足这样的需求。另一个例子就是应用是能够在对象存储里直接消费资源的。</p><p>多站点间连接非常大的挑战，设计考虑因素就更加的复杂。多站点实施时还需预先规划内部和外部连接的额外拓扑，比如 full mesh topology、hub spoke、spine leaf 和 3D Torus。</p><h2 id="站点丢失及恢复"><a href="#站点丢失及恢复" class="headerlink" title="站点丢失及恢复"></a>站点丢失及恢复</h2><p>灾难性事件能破坏站点部分或者全部功能。应该有相应预案和恢复策略来应对这些场景。</p><ul><li>部署应用需能提供持续服务，更重要的，一定要考虑到单站点不可用时的性能影响和应用可靠性。</li><li>要真正理解在发生站点宕掉时，站点间的对象副本和数据发生了什么。如果采用队列支撑，要考虑到能正常安全运行多长时间才发生错误。</li><li>故障发生后，要确保在站点恢复上线后所有操作能正常执行。我们建议在做恢复架构设计时考虑避免竞态条件。</li></ul><h2 id="复制站点间数据"><a href="#复制站点间数据" class="headerlink" title="复制站点间数据"></a>复制站点间数据</h2><p>通常来说，副本是保护对象存储的最佳方式。现有存储架构中有多种的副本方案，比如同步、异步镜像。多数对象存储和后端存储系统都是在存储子系统层面来实现副本。对象存储同样支持副本技术适应云平台需求。</p><p>组织一定要找到数据完整性和数据可用性之间的平衡。副本策略可能影响灾难恢复的方法。</p><p>副本跨机柜、跨数据中心甚至款地域，更多聚焦确保数据落地。保证数据就近、最快访问的能力，对应用体现友好是非常有必要的。</p><p>[^1] <a href="https://docs.openstack.org/arch-design/arch-requirements/arch-requirements-ha.html">https://docs.openstack.org/arch-design/arch-requirements/arch-requirements-ha.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!--
  ~ Copyright 2022 kwanhur
  ~
  ~ Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
--&gt;

&lt;blockquote&gt;
&lt;p&gt;本篇文章内容翻译自 OpenStack 官网 [^1]。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下将从五个方面剖析高可用的需求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="openstack" scheme="https://kwanhur.com/tags/openstack/"/>
    
      <category term="arch" scheme="https://kwanhur.com/tags/arch/"/>
    
      <category term="high-availability" scheme="https://kwanhur.com/tags/high-availability/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 系列（架构篇 2）- 运维需求</title>
    <link href="https://kwanhur.com/2022/05/02/openstack-arch-operational-requirements/"/>
    <id>https://kwanhur.com/2022/05/02/openstack-arch-operational-requirements/</id>
    <published>2022-05-02T13:41:24.000Z</published>
    <updated>2022-05-02T13:58:42.241Z</updated>
    
    <content type="html"><![CDATA[<!--  ~ Copyright 2022 kwanhur  ~  ~ Licensed under the Apache License, Version 2.0 (the "License");  ~ you may not use this file except in compliance with the License.  ~ You may obtain a copy of the License at  ~  ~ http://www.apache.org/licenses/LICENSE-2.0  ~  ~ Unless required by applicable law or agreed to in writing, software  ~ distributed under the License is distributed on an "AS IS" BASIS,  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ~ See the License for the specific language governing permissions and  ~ limitations under the License.  ~--><blockquote><p>本篇博文翻译自 OpenStack 官网 <a href="https://docs.openstack.org/arch-design/arch-requirements/arch-requirements-operations.html">^1</a></p></blockquote><p>以下内容描述运维因素如何影响 OpenStack 云平台设计。</p><span id="more"></span><h2 id="网络设计"><a href="#网络设计" class="headerlink" title="网络设计"></a>网络设计</h2><p>​    对于集群式 OpenStack 的网络设计需考虑集群内互联需求、客户访问他们的云上资源需求、运维管理集群访问需求。并且还需要考虑这些网络的带宽、延迟以及可靠性。</p><p>​    额外还需考虑监控、告警。如果你在采用外部供应商的，需要在你的对照列表定义 SLA，包括运维因素如带宽、延迟、抖动等。</p><p>​    网络资源是需求增长型的，确保网络设计能满足扩张和升级。例如，运维人员新增 IP 地址块，扩大带宽容量。另外，还需要考虑纳管软硬件的生命周期事件，比如升级、退役、中断。做到云平台服务中断不影响相关的租户。</p><p>​    运维方面的考虑需要贯穿整个网络设计过程，包括管理和维护 IP 地址集以及 VLAN 标签 ID、GRE 隧道 ID 和 MPLS 标签。比如，如果需要变更整个网络的 IP 地址，其中一环重排号，网络设计就一定要支持该功能。</p><p>​    当考虑明确的运维因素，网络侧需着重考虑地址使用状况。例如，需考虑到隐性的 IPv4 地址耗尽、迁移至 IPv6 以及使用私有网络来隔离应用接收或产生的不同种类流量。在 IPv4 迁移至 IPv6 时，应用应当参考 IP 地址存储的最佳实践。我们建议尽量避免强依赖于 IPv4 特性而无法迁移至 IPv6 协议，或在两者间实现出现偏差。</p><p>​    为隔离流量，需运维应用为数据库和存储网络流量，分别创建各自的租户网络。为服务启用公共网络，需能支持客户端直接来自互联网的访问。在隔离流量之外，还需考虑服务质量和安全性，以确保每个网络都满足各自的服务要求。</p><p>​    同时，也需考虑网络流量路由表。对于某些应用，需为路由开发复杂的策略框架。为创建路由策略满足业务需求，也需考虑传输流量的经济成本，昂贵的链路 VS 更便宜的链路，还有额外的带宽、延迟、抖动等。</p><p>​    最后，要考虑网络事件如何响应。设计中需考虑到传输负载迁移过程，遇上失败的场景。一旦没有正确规划网络容量，容错流量可能会加重其它的端口或网络链路，导致关联性失败场景出现。这种情况，迁移容错流量到其他链路，链路过载即需继续迁移到更适宜的链路上，直到整张网络不可用为止。</p><h2 id="SLA-考虑"><a href="#SLA-考虑" class="headerlink" title="SLA 考虑"></a>SLA 考虑</h2><p>​    服务登记承诺（SLA）定义了各种等级的能力，会影响到 OpenStack 云平台提供的冗余性和高可用性。</p><p>​    SLA 影响到整体设计的方面包括：</p><ul><li>API 可用性保障隐含者多基础服务实例和高可用的负载均衡器。</li><li>网络运行时长保障影响交换逻辑设计，如需有冗余的交换和电力。</li><li>网络安全策略需求。</li></ul><p>​    在任何超过几台主机的环境，都会有两大领域会在 SLA 里提及：</p><ul><li>数据平面 - 提供虚拟化、网络和存储的服务列表。客户通常需要这些服务能持续可用。</li><li>控制平面 - 典型服务如 API 端点、控制 CRUD 操作的服务列表。在这目录下的服务通常有不同的 SLA 期望，最好能在物理或容器层面将他们和数据平面服务列表隔离开。</li></ul><p>​    为了有效地进行云平台安装，计划中断时间要涵盖创建过程和架构上支持的预期性维护和非预期的系统错误。</p><p>​    明确 SLA 协商部分很重要，包括监控职责和故障下新开启计算服务实例。</p><p>​    升级、补丁和配置变更都可能导致部分服务中断。控制平面停服可能不会影响到数据平面。计算实例在线迁移要求数据平面的组件在所有环节完美配合而减少中断时长。</p><p>​    许多在非 OpenStack 代码内的服务也同样会影响到云平台满足 SLA，包括：</p><ul><li>数据库服务，比如 MySQL 或 PostgreSQL。</li><li>RPC 服务，比如 RabbitMQ。</li><li>外部网络依赖。</li><li>物理限制比如电力、机柜空间、网络线缆等。</li><li>共享存储包括基于阵列的 SAN、存储集群如 Ceph 或 NFS 服务。</li></ul><p>​    在设计上，一些网络服务功能可以被划分到控制和数据平面目录。比如，neutron L3 Agent 服务认为是控制平面组件，路由器就会是数据平面组件。</p><p>​    支持多地域的设计中，SLA 同样需要考虑复用部分服务，如身份认证、门户等。</p><p>​    任何的 SLA 协商都需要考虑第三方合作方的可靠性，尤其是在设计的关键点。比如，一份已有的组件（如存储系统）SLA，就需要考虑到它的有限性。如果云平台需要提供超过这些组件的等级承诺，那将需考虑额外的冗余性。这些因素将是混合云平台的要点，且涵盖了各种第三方依赖。</p><h2 id="支持和维护"><a href="#支持和维护" class="headerlink" title="支持和维护"></a>支持和维护</h2><p>​    运维人员需对 OpenStack 云平台环境提供支持、管理及维护工作。他们所需技能会依据平台的大小和部署目的不同而有所区别。</p><p>​    运维人员维护功能需考虑以下方面：</p><h3 id="维护工作表"><a href="#维护工作表" class="headerlink" title="维护工作表"></a>维护工作表</h3><p>​    操作系统打补丁、硬件&#x2F;固件升级、数据中心关联的变更、以及 OpenStack 组件小版本升级，都是持续的运维工作。OpenStack 项目每六个月的发布周期，同样要考虑到这持续的维护成本。总的方案也得考虑到存储和网络方面的维护，以及底层负载的潜在影响。</p><h3 id="可靠性和可用性"><a href="#可靠性和可用性" class="headerlink" title="可靠性和可用性"></a>可靠性和可用性</h3><p>​    可靠性和可用性依赖于大多少组件的可用性和服务提供商的服务级别。总的需覆盖网络、存储系统、数据中心和操作系统。</p><p>关于更多维护 OpenStack 云平台环境可参考 <a href="https://docs.openstack.org/operations-guide/">官方运维指引</a>。</p><h2 id="日志和监控"><a href="#日志和监控" class="headerlink" title="日志和监控"></a>日志和监控</h2><p>​    OpenStack 云平台需要准确的监控平台来识别和管理错误。</p><p>​    核心的指标包括：</p><ul><li>镜像磁盘使用率</li><li>计算 API 响应耗时</li></ul><p>​    日志和监控并不能有效地区别多站点 OpenStack 云平台。这些工具在运维指引<a href="https://docs.openstack.org/operations-guide/ops-logging-monitoring.html">日志和监控</a>小节有更多描述。日志和监控是每个站点的基础部件，处于公共中心化位置。</p><p>​    当尝试部署日志和监控组件到中心化位置时，一定要认真考虑到内部网络链路负载情况。</p><h2 id="管理软件"><a href="#管理软件" class="headerlink" title="管理软件"></a>管理软件</h2><p>​    管理软件包括集群、日志、监控和告警系统，这些都是云平台常用的。这些也同样影响到整个 OpenStack 云平台的设计，一定要考虑统计到额外的资源占用，比如 CPU、RAM、存储和网络带宽。</p><p>​    集群管理软件，如 Corosync 或 Pacemaker，主要用于云基础设施构建高可用性，部署所需配置的复杂度也很高。<a href="https://docs.openstack.org/ha-guide/">官方高可用指引</a> 提供了更多关于安装和 Corosync 和 Pacemaker 的细节，设计时需考虑到这些软件的打包。</p><p>​    潜在受影响设计因素有：</p><ul><li><p>OS-hypervisor 集成</p><p>确保日志、监控、告警工具选型能支持到 OS-hypervisor 集成</p></li><li><p>网络硬件</p><p>网络硬件选型同样要能支持日志、监控、和告警集成</p></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>​    大部分 OpenStack 组件都需要访问后端数据库服务，来存储状态和配置信息。选择一款合适的后端数据库，要能支持 OpenStack 服务列表的可用性和容错。</p><p>​    MySQL 是 OpenStack 默认数据库，其它兼容的数据库同样可用。</p><p>​    数据库的高可用方案会根据选型而有所不同。MySQL 有多种方案，可用复制技术如 Galera 来支持主主模式集群；主备模式可用各种共享存储。各种潜在的方案都会有所影响到设计：</p><ul><li>采用 Galera&#x2F;MariaDB 需要至少三个 MySQL 节点。</li><li>MongoDB 有它独自的高可用方式。</li><li>OpenStack 的设计，通常并不需要共享存储。但是，为了高可用设计，部分组件需要依实际情况而定。</li></ul><h2 id="运维人员访问系统"><a href="#运维人员访问系统" class="headerlink" title="运维人员访问系统"></a>运维人员访问系统</h2><p>​    云管系统一种趋势，将它们部署到云平台内部。运维人员需要能访问他们来解决重大故障。</p><p>​    对于一个集成性的系统，需确保网络结构能打通所有的云平台。同样，需认真考虑到这些系统实际性能和可靠度，以及更低的响应延迟。</p><p>​    云平台持续演进，包括外部所纳管的系统，即使提前做好准备，也不太可用做到没有变更。另外，各大云供应商提供的基础设施和暴露的都会不一样。这会导致各故障提供的根因分析报告都会有所不同。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--
  ~ Copyright 2022 kwanhur
  ~
  ~ Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
--&gt;

&lt;blockquote&gt;
&lt;p&gt;本篇博文翻译自 OpenStack 官网 &lt;a href=&quot;https://docs.openstack.org/arch-design/arch-requirements/arch-requirements-operations.html&quot;&gt;^1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下内容描述运维因素如何影响 OpenStack 云平台设计。&lt;/p&gt;
    
    </summary>
    
    
      <category term="openstack" scheme="https://kwanhur.com/tags/openstack/"/>
    
      <category term="arch" scheme="https://kwanhur.com/tags/arch/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 系列（架构篇 1）- 企业需求</title>
    <link href="https://kwanhur.com/2022/04/15/openstack-arch-enterprise-requirements/"/>
    <id>https://kwanhur.com/2022/04/15/openstack-arch-enterprise-requirements/</id>
    <published>2022-04-15T13:04:39.000Z</published>
    <updated>2022-04-17T12:10:05.023Z</updated>
    
    <content type="html"><![CDATA[<!--  ~ Copyright 2022 kwanhur  ~  ~ Licensed under the Apache License, Version 2.0 (the "License");  ~ you may not use this file except in compliance with the License.  ~ You may obtain a copy of the License at  ~  ~ http://www.apache.org/licenses/LICENSE-2.0  ~  ~ Unless required by applicable law or agreed to in writing, software  ~ distributed under the License is distributed on an "AS IS" BASIS,  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ~ See the License for the specific language governing permissions and  ~ limitations under the License.  ~--><blockquote><p>前言：个人看法，学习一门技术，先从整体架构视角去了解，让自己有个总体概念。带着问题去查阅官方文档，技术路线会更加清晰，比如它为什么会出现（背景）、帮助谁解决什么样的问题（场景）、如何解决的（方式）、设计思路是什么（架构）。</p><p>本篇文章内容翻译自 OpenStack 官网 <a href="https://docs.openstack.org/arch-design/arch-requirements/arch-requirements-enterprise.html">^1</a>。</p></blockquote><p>总的看，从 13 个方面来考虑影响基于 OpenStack 构建的云设施。分别是：</p><span id="more"></span><ol><li>成本</li><li>上市耗时</li><li>机遇收益</li><li>容量规划与扩展</li><li>性能</li><li>网络</li><li>规约与地理位置</li><li>审计</li><li>安全</li><li>服务承诺</li><li>应用就绪状态</li><li>认证</li><li>迁移，可用性，站点损失及恢复</li></ol><!--more--><p>​    对于任何一个组织，财务都是主要考虑的因素。成本的考虑会很大程度上影响你所能构建成什么类型的云平台。在选择或者设计云平台时，成本不应该成为制约因素。</p><p>​    作为一份通用指引，云平台架构复杂性的增加，构建和维护的成本也会同步增加。比如，一朵混合或多站点部署的云架构，涵盖了多供应商和多种技术架构，就可能需要投入更高的安装和运维成本；因为相比其他架构，它需要更先进的编排系统和易用的工具集。</p><p>​    设计一套云平台，通常会考虑以下成本目录：</p><ul><li>计算资源</li><li>网络资源</li><li>平台副本</li><li>存储资源</li><li>平台管理</li><li>运维成本</li></ul><p>​    云平台扩展时所需的成本，需要重点考虑。同时，整体建设成本最小化也是比较重要的。运维海量可扩展的 OpenStack 云平台时，使用商业硬件和自由可用的开源软件组件，有助于降低部署成本和运维投入，可参考 <a href="http://www.opencompute.org/">Open Compute</a> 提供的额外信息。</p><h2 id="上市耗时"><a href="#上市耗时" class="headerlink" title="上市耗时"></a>上市耗时</h2><p>​    构建云平台时，是否具备相对稳定的服务或产品发布耗时能力，是常见的商业因素。让用户自助按需获得计算、网络、存储资源，可能帮助到他们的产品或者应用减少投产上市的时间。</p><p>​    你需要权衡构建云平台和迁移用户上云的耗时。在某些场景下，现有的基础设施会影响他们的架构选型。比如，对于一个已有的投资系统（内含多个应用），使用多云平台可能会是一个更优选项，毕竟它能快速地将各组件串联在一起而不是全部重构上到一套云平台。</p><h2 id="机遇收益"><a href="#机遇收益" class="headerlink" title="机遇收益"></a>机遇收益</h2><p>​    机遇收益很大程度上受制于云平台的意图和用户案例。商业需求、客户面临的产品都会不同程度上影响到一套内部的、私有的云平台。你一定要考虑云平台具备哪些功能特性，来吸引你的用户。</p><h2 id="容量规划与扩展"><a href="#容量规划与扩展" class="headerlink" title="容量规划与扩展"></a>容量规划与扩展</h2><p>​    容量和工作负载的布置是云平台的关键设计因素。长期的容量规划必定满足随时间推移的增长需求，避免资源耗尽的情况。</p><p>​    预测特定应用工作负载是比较困难的，因为它受用户量、应用成熟度等因素影响。定义出应用需求还是很有可能的，比如 vCPU，RAM，bandwidth，及其他资源。不同云平台可能使用不同的度量维度，甚至会有不同的超售配额。</p><p>​    超售配额是一种虚拟化出比物理资源更多大容量的方式。例如，一台 32 GB RAM 物理节点可能承载着 24 个 2 GB RAM 主机实例。这 24 个实例并不会同时都使用 2 GB RAM，这种超售方案能很好工作。但是，某些主机消耗超过了资源极限，最终会产生不符合预期的性能表现。固然是需要根据容量规划来设计超售配比。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>​    设计任何一套云平台，性能都是核心考虑因素。随着规模和复杂度的提升，性能越显突出。单站点、私有云基本是可控的，多站点和混合部署则需要更多关注规划来减少问题，比如站点间的延迟。</p><p>​    例如，你应该考虑各种方法来降低不同云平台间的工作负载耗时。这可能需要将数据搬得离应用更近些，或者将应用更靠近数据的地方以及功能化分组，最终在单套云平台内获得更低延迟的连接，甚至在多套云平台间。</p><p>​    这样可能需要一套 CMP 云管平台来协助决策哪些云资源适合哪些类的工作负载。</p><p>​    使用原生的 OpenStack 工具集能够帮助提升性能。比如，你可以使用遥测来衡量性能以及编排服务（心跳），以应对按需带来的变化。</p><h3 id="云资源部署"><a href="#云资源部署" class="headerlink" title="云资源部署"></a>云资源部署</h3><p>​    云平台用户期望拥有可重叠的、可依赖的以及确定的进程来拉起和部署云资源。你应该通过基于 web 界面接口或者公共可用的 API 端点来发布这些资源。所有请求云资源的可能选项都必需通过某种用户接口、命令式接口（CLI）或者 API 端点来启用。</p><h3 id="消费模型"><a href="#消费模型" class="headerlink" title="消费模型"></a>消费模型</h3><p>​    云平台用户期望一种完全自助、按需获取的消费模型。当一个 OpenStack 云平台满足了海量可伸缩的资源诉求，能轻松应对该种消费模型。</p><ul><li>一切必需自动化。例如，所有的计算硬件、存储硬件、网络硬件，采用某种可支持的软件来进行安装及配置。手动操作对构建海量可伸缩的 OpenStack 设计架构是不切实际的。</li><li>海量可伸缩的 OpenStack 云平台需要配齐可扩展的度量和监控功能来最大化运维效率，通过保持知悉这些基础设施的状态信息。这就包括了全部硬件和软件的状态度量。一套同类的日志和告警功能需同样配备，用于存储和开启这些有度量和监控方案提供的度量指标。云平台运维者需要知道度量和监控方案提供的数据用于规划容量和容量趋势分析。</li></ul><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p>​    对于许多用户使用场景，他们的应用性能受到工作负载的直接影响，所以在设计时应该考虑到。特定的应用通过部署在多位置的云平台，有可能获取接近零延迟。这些位置可能分布在不同的数据中心、城市、国家或者地理区域，取决于用户需求及用户所在位置。</p><h3 id="I-x2F-O-需求"><a href="#I-x2F-O-需求" class="headerlink" title="I&#x2F;O 需求"></a>I&#x2F;O 需求</h3><p>​    I&#x2F;O 性能需求需在决定一个最终存储框架前完成调研和建模。运行基准测试来提供预期的性能水平基线。如果这些测试包含了许多细节，最终数据能更有利于建模和评估不同的工作负载。在整个架构生命周期内，运行脚本化的小基准测试能及时记录系统健康度。这些来自脚本化基准测试的数据，在未来能帮助限定和深入理解一个组织的需求。</p><h3 id="伸缩"><a href="#伸缩" class="headerlink" title="伸缩"></a>伸缩</h3><p>​    在关注存储方面，OpenStack 架构设计可伸缩存储方案是由最初的需求驱动的，包括了 IOPS，容量，带宽以及未来需求。基于项目的容量规划，需要覆盖全程的消耗，在设计时是非常重要的。该架构应该平衡成本和容量，在两者间通过新技术和方法来满足灵活性要求。</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>​    考虑网络的功能性、安全性、可伸缩性、可用性和可测试性是非常重要的，特别是在选择一套 CMP 平台及一家云厂商的时候。</p><ul><li>依赖于网络框架和设计最小功能测试用例。在升级期间或之后，这能确保测试和功能的完整性。</li><li>可伸缩性涵盖多云厂商可能限定的底层网络框架，尤其在选择不同云厂商时。提供网络 API 接口功能及用于验证功能完整性，特别是选择了跨多云端点，就显得尤为重要。</li><li>高可用在功能实现和设计时，都需要考虑到。常见的模式主 - 热备、主备和主主。高可用的开发和测试框架，对于保证功能和条约是非常有必要的。</li><li>考虑数据在客户端和端点、不同云平台间传输流量的安全性。</li></ul><p>​    例如，视频流延迟和低质量的 VoIP 通话就会较大影响用户体验，潜在可能导致产品和经济的损失。</p><h3 id="网络误配置"><a href="#网络误配置" class="headerlink" title="网络误配置"></a>网络误配置</h3><p>​    配置了不正确的 IP 地址、VLAN 号和路由器，都有可能引起大范围的网络故障，极端情况下，影响整套基础设施。自动化的网络配置能极小化这种运维错误的几率而导致灾难性的事故。</p><h3 id="容量规划"><a href="#容量规划" class="headerlink" title="容量规划"></a>容量规划</h3><p>​    云网络需要对容量进行管理和及时的扩充。容量规划包括了网络设备购买和硬件潜在长达数月&#x2F;年的中断。</p><h3 id="网络调优"><a href="#网络调优" class="headerlink" title="网络调优"></a>网络调优</h3><p>​    配置云网络需要最小化链路缺失、丢包、包风暴、广播风暴及环路。</p><h3 id="单点故障"><a href="#单点故障" class="headerlink" title="单点故障"></a>单点故障</h3><p>​    在物理和各种环境，都要考虑高可用。如果存在单故障点，比如单个上游连接、单电源供电，都会导致无法避免的故障。</p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>​    一份过于复杂的网络设计，会难以运维及问题定位。在设备层面配置要易于维护，能用自动化工具处理覆盖式网络，在功能和特定设备上，通过避免或者记录下非传统式的交汇点，进而规避故障。</p><h3 id="非标准特性"><a href="#非标准特性" class="headerlink" title="非标准特性"></a>非标准特性</h3><p>​    通过配置云厂商网络来获得厂商的特定特性，这是比较冒险的。例如 MLAG 多链接聚合模式，用来在网络交换聚合器中提供冗余度。MLAG 不是一份标准，结果不同厂商都有自己的实现逻辑。MLAG 架构是不适合于跨多交换机厂商的，它会导致被厂商锁定，以及组件升级延迟甚至不可用等。</p><h3 id="动态资源扩张或突发"><a href="#动态资源扩张或突发" class="headerlink" title="动态资源扩张或突发"></a>动态资源扩张或突发</h3><p>​    一个应用需要额外的资源来满足多云架构。例如，零售商只是在假期需要额外的资源，但不想再添加其他的云资源来应对需求洪峰。这些用户额外带来的突增负载，在这期间，可在公共云资源上来对应。这些突增的时间，有可能长达数小时到年不等。</p><h2 id="规约与地理位置"><a href="#规约与地理位置" class="headerlink" title="规约与地理位置"></a>规约与地理位置</h2><p>​    一个组织可能有明确的法律义务和正规规约来评估哪些明确的工作负载或数据不能被落地到指定的区域。</p><p>​    对于多站点的云平台，规约要素是相当重要的，包括：</p><ul><li>联邦法律需求</li><li>本地司法法律和规约需求</li><li>镜像一致性和可用性</li><li>存储副本和可用性（包括块存储和文件&#x2F;对象存储）</li><li>认证、授权和审计（AAA）</li></ul><p>​    地理因素可能同样影响数据中心构建&#x2F;租赁成本，包括：</p><ul><li>楼宇空间</li><li>楼宇承重</li><li>机柜高度和类型</li><li>环境因素</li><li>电力使用和电力使用有效性</li><li>物理安全性</li></ul><h2 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h2><p>​    一个全方位的审计计划，对于快速排查问题是非常关键的。持续跟踪安全组的变化和租户的变化，在生产环境对于需要回滚变更是很有用的。比如，如果某个租户的所有安全组规则消失了，迅速跟踪出该问题的能力，对于运维和合理性解释是非常的重要。</p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>​    各类型组织使用云平台有着不同级别的安全需求。例如，政府和金融机构通常由非常高的安全需求。安全应当依据资产、威胁和漏洞风险等多方位来保障。</p><h2 id="服务承诺"><a href="#服务承诺" class="headerlink" title="服务承诺"></a>服务承诺</h2><p>​    SLA 是一定涵括在商业、技术和法律里。小的、私有的云平台可能是包含一份简单 SLA，但混合或者公有云平台通常会有多份正式协议书给到用户。</p><p>​    对于一个海量可伸缩的 OpenStack 公有云平台用户，对于掌控安全、性能或可用性是没有多少期望。用户只关注 API 服务运行时长 SLA、基本的服务 SLA。用户根据职责来定位这些他们关心的议题。对于公有云设施，超出预期的是非常的罕见，构建私有或政府机构的则会有明确的清单。</p><p>​    搞性能系统会有 SLA 清单说明最低等级的服务质量，涵盖保证运行时长、延迟和带宽。SLA 等级更多会受网络架构和系统冗余度需求的影响。</p><p>​    混合云的 SLA 一定要满足厂商的能力和权力范围的差异。</p><h2 id="应用就绪状态"><a href="#应用就绪状态" class="headerlink" title="应用就绪状态"></a>应用就绪状态</h2><p>​    有些应用是能容忍对象存储同步缺失的，但其他则需要这些对象副本并在各区域可用。理解这些云资源实现逻辑如何影响新建、或存量的应用，对于风险迁移、成功上云都是很重要的。应用可能需要重写来适配无冗余的基础设施或云平台。</p><h3 id="应用压力"><a href="#应用压力" class="headerlink" title="应用压力"></a>应用压力</h3><p>​    存量应用的业务，可能会发现，相比迁移到一套云平台，集成到多套云平台会更加艰难。</p><h3 id="非预期使用模型"><a href="#非预期使用模型" class="headerlink" title="非预期使用模型"></a>非预期使用模型</h3><p>​    缺失预定义使用模型，会让用户不知如何为各种应用评估需求。它可以提供应用所需的独立程度和灵活性，这些不是其他非云平台场景下能提供的。</p><h3 id="按需和自助式应用"><a href="#按需和自助式应用" class="headerlink" title="按需和自助式应用"></a>按需和自助式应用</h3><p>​    云平台提供终端用户能通过简单灵活的方式去按需获取计算、存储、网络和软件资源。用户能够扩展资源来提升服务质量，避免受到底层操作影响。使用通用型云平台架构收益之一，就是有能力从最初有限资源开始按需扩展资源应对增长诉求。</p><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>​    比较推荐采用集中式认证服务，而不是每个站点都实现一套。这就要求认证机制是高可用且支持分布式的。认证服务器定位就应该提前做好设计。</p><h2 id="迁移，可用性，站点损失及恢复"><a href="#迁移，可用性，站点损失及恢复" class="headerlink" title="迁移，可用性，站点损失及恢复"></a>迁移，可用性，站点损失及恢复</h2><p>​    故障都可能会导致部分或全部站点功能不可用。提前制定策略来应对这些场景：</p><ul><li>部署的应用需能够持续提供服务，站点不可用一定要考虑带来的性能和应用可靠性影响。</li><li>站点故障时，弄清楚各种对象和数据副本发生了什么是很重要的。如果产生了队列阻塞，需要评估这些阻塞会持续多久就会导致系统错误。</li><li>故障过后，确保能找到正确的方法来应对下一次同样的出现。我们建议你从架构上恢复策略而避免各种竞态条件。</li></ul><h3 id="灾难恢复与业务持续性"><a href="#灾难恢复与业务持续性" class="headerlink" title="灾难恢复与业务持续性"></a>灾难恢复与业务持续性</h3><p>​    更加偏移的存储策略能让公有云找到合适的备份策略。</p><h3 id="迁移场景"><a href="#迁移场景" class="headerlink" title="迁移场景"></a>迁移场景</h3><p>​    混合云架构能让应用在不同云平台间迁移。</p><h3 id="厂商可用性或实现细节"><a href="#厂商可用性或实现细节" class="headerlink" title="厂商可用性或实现细节"></a>厂商可用性或实现细节</h3><p>​    业务变更能影响厂商的可用性。比如，服务变更就可能中断一个混合云的环境或者增加成本。</p><h3 id="厂商-API-变更"><a href="#厂商-API-变更" class="headerlink" title="厂商 API 变更"></a>厂商 API 变更</h3><p>​    依赖外部云厂商服务，难以控制厂商不去变更 API，变更可能会破坏兼容性。尽量使用通用的 API 来尽可能减少潜在的冲突。</p><h3 id="镜像插拔"><a href="#镜像插拔" class="headerlink" title="镜像插拔"></a>镜像插拔</h3><p>​    就像 Kilo 版本发布一样，没有一个通用镜像格式适用于所有的云平台。在不同云平台间迁移，需要提前协商好镜像格式。为了简化部署，使用最小化和最简单的镜像，只安装那些必需的组件，使用部署管理器（如 Chef、Puppet）。别为了加速处理而使用笨重的镜像，除非你是在同一云平台上部署这些镜像。</p><h3 id="API-差异"><a href="#API-差异" class="headerlink" title="API 差异"></a>API 差异</h3><p>​    避免使用不仅仅只是 OpenStack 或者带有不同版本 OpenStack 的混合云平台，就像 API 变更一样会带来兼容性问题。</p><h3 id="业务或技术多样性"><a href="#业务或技术多样性" class="headerlink" title="业务或技术多样性"></a>业务或技术多样性</h3><p>​    许多组织根据业务多样性，使用多厂商的混合云平台方案来分摊这些工作负载。这能保证应用的主机资源不被厂商锁定。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--
  ~ Copyright 2022 kwanhur
  ~
  ~ Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
--&gt;

&lt;blockquote&gt;
&lt;p&gt;前言：个人看法，学习一门技术，先从整体架构视角去了解，让自己有个总体概念。带着问题去查阅官方文档，技术路线会更加清晰，比如它为什么会出现（背景）、帮助谁解决什么样的问题（场景）、如何解决的（方式）、设计思路是什么（架构）。&lt;/p&gt;
&lt;p&gt;本篇文章内容翻译自 OpenStack 官网 &lt;a href=&quot;https://docs.openstack.org/arch-design/arch-requirements/arch-requirements-enterprise.html&quot;&gt;^1&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总的看，从 13 个方面来考虑影响基于 OpenStack 构建的云设施。分别是：&lt;/p&gt;
    
    </summary>
    
    
      <category term="openstack" scheme="https://kwanhur.com/tags/openstack/"/>
    
      <category term="arch" scheme="https://kwanhur.com/tags/arch/"/>
    
  </entry>
  
  <entry>
    <title>pick-up-blog</title>
    <link href="https://kwanhur.com/2022/04/10/pick-up-blog/"/>
    <id>https://kwanhur.com/2022/04/10/pick-up-blog/</id>
    <published>2022-04-10T09:27:49.000Z</published>
    <updated>2022-04-17T11:47:55.955Z</updated>
    
    <content type="html"><![CDATA[<!--  ~ Copyright 2022 kwanhur  ~  ~ Licensed under the Apache License, Version 2.0 (the "License");  ~ you may not use this file except in compliance with the License.  ~ You may obtain a copy of the License at  ~  ~ http://www.apache.org/licenses/LICENSE-2.0  ~  ~ Unless required by applicable law or agreed to in writing, software  ~ distributed under the License is distributed on an "AS IS" BASIS,  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ~ See the License for the specific language governing permissions and  ~ limitations under the License.  ~--><p>该博客被遗弃很久了，近期看到 <code>NexT</code> 主题比较合心意，决定折腾下，更换了主题，看到的效果还不错。</p><p>另一原因是，之前写的分享内容全部在公司内部<code>wiki</code>系统，离开后也就留下了；所以决定后续关于技术研究、想法点子等采用<code>Github Pages</code>形式分享。</p><span id="more"></span><p>折腾过程还是遇到点小麻烦：本地预览没问题，发布推送上<code>Github</code>后，样式错乱，即使禁用浏览器缓存也不起作用。</p><p>经一番翻查，对比样式文件<code>css/main.css</code>本地与<code>Github</code>请求响应体大小不一致。</p><p>手动触发请求<code>https://$repo.github.io/css/main.css</code>随即解决。</p><p>原因猜测：旧主题所用的样式文件一直被服务器端缓存，经<code>hexo deploy</code>推送至<code>Github</code>，但<code>Github Pages</code>服务并不会更新静态文件缓存。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--
  ~ Copyright 2022 kwanhur
  ~
  ~ Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
--&gt;

&lt;p&gt;该博客被遗弃很久了，近期看到 &lt;code&gt;NexT&lt;/code&gt; 主题比较合心意，决定折腾下，更换了主题，看到的效果还不错。&lt;/p&gt;
&lt;p&gt;另一原因是，之前写的分享内容全部在公司内部&lt;code&gt;wiki&lt;/code&gt;系统，离开后也就留下了；所以决定后续关于技术研究、想法点子等采用&lt;code&gt;Github Pages&lt;/code&gt;形式分享。&lt;/p&gt;
    
    </summary>
    
    
      <category term="journal" scheme="https://kwanhur.com/tags/journal/"/>
    
  </entry>
  
  <entry>
    <title>build-imagemagick-libwebp-with-jpeg-turbo-from-source</title>
    <link href="https://kwanhur.com/2018/04/09/build-imagemagick-libwebp-with-jpeg-turbo-from-source/"/>
    <id>https://kwanhur.com/2018/04/09/build-imagemagick-libwebp-with-jpeg-turbo-from-source/</id>
    <published>2018-04-09T05:46:26.000Z</published>
    <updated>2022-04-17T12:10:04.997Z</updated>
    
    <content type="html"><![CDATA[<!--  ~ Copyright 2022 kwanhur  ~  ~ Licensed under the Apache License, Version 2.0 (the "License");  ~ you may not use this file except in compliance with the License.  ~ You may obtain a copy of the License at  ~  ~ http://www.apache.org/licenses/LICENSE-2.0  ~  ~ Unless required by applicable law or agreed to in writing, software  ~ distributed under the License is distributed on an "AS IS" BASIS,  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ~ See the License for the specific language governing permissions and  ~ limitations under the License.  ~--><p>对于喜欢折腾的人，安装所需系统库都是手工源码编译出来使用，这或许有种可控的感觉。</p><p>相比直接使用软件库已编译好的，源码编译可更加自由选择或指定版本。</p><p>近期在 CentOS-7.2 系统上，升级 webp 图片依赖系统库时，整理了个一键编译 ImageMagick 脚本，如下：</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">head</span>  -n 1 /etc/redhat-release </span><br><span class="line"></span><br><span class="line">CentOS Linux release 7.2.1511 (Core) </span><br><span class="line"></span><br><span class="line">$ <span class="built_in">uname</span> -r</span><br><span class="line">3.10.0-327.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /export/svr /export/lib</span><br><span class="line">DIR=/export/svr</span><br><span class="line">PREFIX=/export/lib</span><br><span class="line"></span><br><span class="line">JPEG_VER=1.5.2</span><br><span class="line">PNG_VER=1.6.34</span><br><span class="line">GIF_VER=5.1.4</span><br><span class="line">WEBP_VER=0.6.1</span><br><span class="line">IMAGICK_VER=7.0.7-26</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span>.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  wget https://jaist.dl.sourceforge.net/project/libjpeg-turbo/<span class="variable">$JPEG_VER</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span>.tar.gz -O <span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span>.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  wget https://jaist.dl.sourceforge.net/project/libpng/libpng16/<span class="variable">$PNG_VER</span>/libpng-<span class="variable">$PNG_VER</span>.tar.gz -O <span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span>.tar.bz2 ];<span class="keyword">then</span></span><br><span class="line">  wget https://jaist.dl.sourceforge.net/project/giflib/giflib-<span class="variable">$GIF_VER</span>.tar.bz2 -O <span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span>.tar.bz2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span>.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  wget https://codeload.github.com/webmproject/libwebp/tar.gz/v<span class="variable">$WEBP_VER</span> -O <span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$PREFIX</span>/ImageMagick-<span class="variable">$IMAGICK_VER</span>.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  wget https://codeload.github.com/ImageMagick/ImageMagick/tar.gz/<span class="variable">$IMAGICK_VER</span> -O <span class="variable">$PREFIX</span>/ImageMagick-<span class="variable">$IMAGICK_VER</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$PREFIX</span></span><br><span class="line"><span class="built_in">rm</span> -fr libjpeg-turbo-<span class="variable">$JPEG_VER</span> libpng-<span class="variable">$PNG_VER</span> giflib-<span class="variable">$GIF_VER</span> libwebp-<span class="variable">$WEBP_VER</span> ImageMagick-<span class="variable">$IMAGICK_VER</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#base package</span></span><br><span class="line">yum install -y -q libtool libtool-ltdl libtool-ltdl-devel gcc make autoconf automake readline-devel nasm</span><br><span class="line"></span><br><span class="line"><span class="comment">#libjpeg-turbo</span></span><br><span class="line"><span class="built_in">unlink</span> <span class="variable">$PREFIX</span>/libjpeg-turbo</span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span></span><br><span class="line">make clean &gt;/dev/null</span><br><span class="line">./configure --prefix=<span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span> &amp;&amp; make -j24 &amp;&amp; make -j24 install</span><br><span class="line"><span class="built_in">ln</span> -sfnv <span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span> <span class="variable">$PREFIX</span>/libjpeg-turbo</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> $? -eq 0 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;install_status libjpeg-turbo OK&quot;</span>||<span class="built_in">echo</span> <span class="string">&quot;install_status libjpeg-turbo failed&quot;</span></span><br><span class="line">sudo <span class="built_in">cp</span> -a <span class="variable">$PREFIX</span>/libjpeg-turbo/lib/pkgconfig/*.pc /usr/lib64/pkgconfig/</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PREFIX</span>/libjpeg-turbo/lib&quot;</span> &gt; /etc/ld.so.conf.d/jpeg-turbo.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#libpng</span></span><br><span class="line"><span class="built_in">unlink</span> <span class="variable">$PREFIX</span>/libpng</span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span>/libpng-<span class="variable">$PNG_VER</span></span><br><span class="line">make clean &gt;/dev/null</span><br><span class="line">./configure --prefix=<span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span> &amp;&amp; make -j24 &amp;&amp; make -j24 install</span><br><span class="line"><span class="built_in">ln</span> -sfnv <span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span> <span class="variable">$PREFIX</span>/libpng</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> $? -eq 0 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;install_status libpng OK&quot;</span>||<span class="built_in">echo</span> <span class="string">&quot;install_status libpng failed&quot;</span></span><br><span class="line">sudo <span class="built_in">cp</span> -a <span class="variable">$PREFIX</span>/libpng/lib/pkgconfig/*.pc /usr/lib64/pkgconfig/</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PREFIX</span>/libpng/lib&quot;</span> &gt; /etc/ld.so.conf.d/libpng.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#giflib</span></span><br><span class="line"><span class="built_in">unlink</span> <span class="variable">$PREFIX</span>/giflib</span><br><span class="line"><span class="built_in">rm</span> -fr <span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span>/giflib-<span class="variable">$GIF_VER</span></span><br><span class="line">make clean &gt;/dev/null</span><br><span class="line">./configure --prefix=<span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span> &amp;&amp; make -j24 &amp;&amp; make install</span><br><span class="line"><span class="built_in">ln</span> -sfnv <span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span> <span class="variable">$PREFIX</span>/giflib </span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> $? -eq 0 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;install_status giflib OK&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;install_status giflib failed&quot;</span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PREFIX</span>/giflib/lib&quot;</span> &gt; /etc/ld.so.conf.d/giflib.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#libwebp</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span>/libwebp-<span class="variable">$WEBP_VER</span></span><br><span class="line">make clean &gt;/dev/null</span><br><span class="line"><span class="built_in">unlink</span> <span class="variable">$PREFIX</span>/libwebp</span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span></span><br><span class="line">./configure --prefix=<span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span> --enable-everything --disable-tiff --disable-wic \</span><br><span class="line">--with-gifincludedir=<span class="variable">$PREFIX</span>/giflib/include --with-giflibdir=<span class="variable">$PREFIX</span>/giflib/lib \</span><br><span class="line">--with-jpegincludedir=<span class="variable">$PREFIX</span>/libjpeg-turbo/include --with-jpeglibdir=<span class="variable">$PREFIX</span>/libjpeg-turbo/lib \</span><br><span class="line">--with-pngincludedir=<span class="variable">$PREFIX</span>/libpng/include --with-pnglibdir=<span class="variable">$PREFIX</span>/libpng/lib &amp;&amp; make -j24 &amp;&amp; make install</span><br><span class="line"><span class="built_in">ln</span> -sfnv <span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span> <span class="variable">$PREFIX</span>/libwebp</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> $? -eq 0 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;install_status libwebp OK&quot;</span>||<span class="built_in">echo</span> <span class="string">&quot;install_status libwebp failed&quot;</span></span><br><span class="line">sudo <span class="built_in">cp</span> -a <span class="variable">$PREFIX</span>/libwebp/lib/pkgconfig/*.pc /usr/lib64/pkgconfig/</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PREFIX</span>/libwebp/lib&quot;</span> &gt; /etc/ld.so.conf.d/libwebp.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#webp support yes</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span>/ImageMagick-<span class="variable">$IMAGICK_VER</span></span><br><span class="line"><span class="built_in">unlink</span> <span class="variable">$PREFIX</span>/imagemagick</span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$PREFIX</span>/imagemagick-<span class="variable">$IMAGICK_VER</span></span><br><span class="line">make clean &gt;/dev/null </span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG=/usr/bin/pkg-config</span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">&quot;-I<span class="variable">$PREFIX</span>/libjpeg-turbo/include&quot;</span></span><br><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">&quot;-L<span class="variable">$PREFIX</span>/libjpeg-turbo/lib&quot;</span></span><br><span class="line">./configure --prefix=<span class="variable">$PREFIX</span>/imagemagick-<span class="variable">$IMAGICK_VER</span> --enable-static --enable-shared  --disable-docs  \</span><br><span class="line">--with-modules --with-webp=<span class="built_in">yes</span> --disable-openmp --enable-delegate-build &amp;&amp; make -j 24 &amp;&amp; make install</span><br><span class="line"><span class="built_in">ln</span> -sfnv <span class="variable">$PREFIX</span>/imagemagick-<span class="variable">$IMAGICK_VER</span> <span class="variable">$PREFIX</span>/imagemagick</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> $? -eq 0 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;install_status imagemagick OK&quot;</span>||<span class="built_in">echo</span> <span class="string">&quot;install_status imagemagick failed&quot;</span></span><br><span class="line">sudo <span class="built_in">cp</span> -a <span class="variable">$PREFIX</span>/imagemagick/lib/pkgconfig/*.pc /usr/lib64/pkgconfig/</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PREFIX</span>/imagemagick/lib&quot;</span> &gt; /etc/ld.so.conf.d/imagemagick.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#pacakge imagemagick with dependent libraries</span></span><br><span class="line">VERSION=7.0.7-26</span><br><span class="line">LIB_PKG=/usr/lib64/pkgconfig</span><br><span class="line">LD_CONF=/etc/ld.so.conf.d</span><br><span class="line"></span><br><span class="line">tar -jPcf imagemagick-<span class="variable">$VERSION</span>.tar.bz2 <span class="variable">$PREFIX</span>/imagemagick <span class="variable">$PREFIX</span>/imagemagick-7.0.7-26 <span class="variable">$PREFIX</span>/giflib \</span><br><span class="line"><span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span> <span class="variable">$PREFIX</span>/libpng <span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span> <span class="variable">$PREFIX</span>/libwebp <span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span> \</span><br><span class="line"><span class="variable">$PREFIX</span>/libjpeg-turbo <span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span> \</span><br><span class="line"><span class="variable">$LIB_PKG</span>/ImageMagick-7.Q16HDRI.pc <span class="variable">$LIB_PKG</span>/ImageMagick.pc <span class="variable">$LIB_PKG</span>/Magick++-7.Q16HDRI.pc <span class="variable">$LIB_PKG</span>/MagickCore-7.Q16HDRI.pc \</span><br><span class="line"><span class="variable">$LIB_PKG</span>/MagickCore.pc <span class="variable">$LIB_PKG</span>/Magick++.pc <span class="variable">$LIB_PKG</span>/MagickWand-7.Q16HDRI.pc <span class="variable">$LIB_PKG</span>/MagickWand.pc <span class="variable">$LIB_PKG</span>/libwebpdecoder.pc \</span><br><span class="line"><span class="variable">$LIB_PKG</span>/libwebpdemux.pc <span class="variable">$LIB_PKG</span>/libwebpmux.pc <span class="variable">$LIB_PKG</span>/libwebp.pc <span class="variable">$LIB_PKG</span>/libjpeg.pc <span class="variable">$LIB_PKG</span>/libturbojpeg.pc \</span><br><span class="line"><span class="variable">$LD_CONF</span>/jpeg-turbo.conf <span class="variable">$LD_CONF</span>/libwebp.conf <span class="variable">$LD_CONF</span>/imagemagick.conf <span class="variable">$LD_CONF</span>/giflib.conf <span class="variable">$LD_CONF</span>/libpng.conf</span><br></pre></td></tr></table></figure><p>通过该系统库，完美适配 <a href="https://github.com/kwanhur/lua-resty-imagick">lua-resty-imagick</a> :)</p>]]></content>
    
    <summary type="html">
    
      &lt;!--
  ~ Copyright 2022 kwanhur
  ~
  ~ Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
--&gt;

&lt;p&gt;对于喜欢折腾的人，安装所需系统库都是手工源码编译出来使用，这或许有种可控的感觉。&lt;/p&gt;
&lt;p&gt;相比直接使用软件库已编译好的，源码编译可更加自由选择或指定版本。&lt;/p&gt;
&lt;p&gt;近期在 CentOS-7.2 系统上，升级 webp 图片依赖系统库时，整理了个一键编译 ImageMagick 脚本，如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="lua" scheme="https://kwanhur.com/tags/lua/"/>
    
      <category term="webp" scheme="https://kwanhur.com/tags/webp/"/>
    
      <category term="imagemagick" scheme="https://kwanhur.com/tags/imagemagick/"/>
    
  </entry>
  
  <entry>
    <title>nginx-http2-grpc</title>
    <link href="https://kwanhur.com/2018/03/23/nginx-http2-grpc/"/>
    <id>https://kwanhur.com/2018/03/23/nginx-http2-grpc/</id>
    <published>2018-03-23T08:43:36.000Z</published>
    <updated>2022-04-17T11:51:51.399Z</updated>
    
    <content type="html"><![CDATA[<!--  ~ Copyright 2022 kwanhur  ~  ~ Licensed under the Apache License, Version 2.0 (the "License");  ~ you may not use this file except in compliance with the License.  ~ You may obtain a copy of the License at  ~  ~ http://www.apache.org/licenses/LICENSE-2.0  ~  ~ Unless required by applicable law or agreed to in writing, software  ~ distributed under the License is distributed on an "AS IS" BASIS,  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ~ See the License for the specific language governing permissions and  ~ limitations under the License.  ~--><p>NGINX 官方已发布<a href="http://nginx.org/en/CHANGES">1.13.10</a>版本，其最主要更新功能点莫过于支持 gRPC 服务代理，即新增的模块<a href="http://nginx.org/en/docs/http/ngx_http_grpc_module.html">ngx_http_grpc_module</a>。</p><p>这意味着可以很容易复用 Nginx 现有基础设施，简单几步即可构建出高可用的 gRPC 服务端集群，具体构建概要如下：</p><span id="more"></span><blockquote><p>搭建 go-grpc 服务，参见 <a href="https://grpc.io/docs/quickstart/go.html">https://grpc.io/docs/quickstart/go.html</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/google.golang.org/grpc/examples/helloworld</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务端，默认端口 50051</span></span><br><span class="line">$ go run greeter_server/main.go</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试客户端</span></span><br><span class="line">$ go run greeter_client/main.go</span><br><span class="line"></span><br><span class="line"><span class="comment">#交互成功可见输出结果</span></span><br><span class="line">Greeting: Hello world</span><br></pre></td></tr></table></figure><blockquote><p>搭建 nginx-grpc 代理</p><blockquote><p>nginx 构建支持 http2+grpc</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://nginx.org/download/nginx-1.13.10.tar.gz -O /tmp/nginx-1.13.10.tar.gz</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /tmp &amp;&amp; tar xzf nginx-1.13.10.tar.gz &amp;&amp; <span class="built_in">cd</span> nginx-1.13.10</span><br><span class="line"></span><br><span class="line">$ ./configure --with-http_ssl_module --with-http_v2_module &amp;&amp; make -j4 &amp;&amp; make install &amp;&amp; /usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>配置 nginx 支持 grpc 代理</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#vhosts/grpc.conf 配置 demo 文件</span><br><span class="line">upstream grpc.server&#123;</span><br><span class="line">    server 127.0.0.1:50051;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 http2;</span><br><span class="line">    access_log grpc.access.log main;</span><br><span class="line">        </span><br><span class="line">    location / &#123;</span><br><span class="line">        grpc_pass grpc.server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>从上述简单的配置可看出，grpc 模块可以和 upstream 模块结合使用，这意味着可复用 upstream 模块<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html">高可用配置</a>,<br>当然，grpc 模块也提供类似配置，如<a href="http://nginx.org/en/docs/http/ngx_http_grpc_module.html#grpc_next_upstream">grpc_next_upstream</a>等。</p></blockquote><p>验证 nginx-grpc 代理</p><blockquote><p>启动 nginx 代理服务</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /usr/local/nginx/sbin/nginx -t &amp;&amp; sudo /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><blockquote><p>grpc 服务测验</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/google.golang.org/grpc/examples/helloworld</span><br><span class="line"></span><br><span class="line"><span class="comment">#！注意修改客户端连接服务端口为 80</span></span><br><span class="line">$ go run greeter_client/main.go</span><br><span class="line"></span><br><span class="line"><span class="comment">#交互成功可见输出结果</span></span><br><span class="line">Greeting: Hello world</span><br><span class="line"><span class="comment">#nginx 访问日志可见输出</span></span><br><span class="line">127.0.0.1 - - [23/Mar/2018:17:21:10 +0800] <span class="string">&quot;POST /helloworld.Greeter/SayHello HTTP/2.0&quot;</span> 200 18 <span class="string">&quot;-&quot;</span> <span class="string">&quot;grpc-go/1.11.0-dev&quot;</span> <span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure><p>总体可见，通过 nginx 可以很轻松的构建出高可用的 grpc 服务代理。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--
  ~ Copyright 2022 kwanhur
  ~
  ~ Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
--&gt;

&lt;p&gt;NGINX 官方已发布&lt;a href=&quot;http://nginx.org/en/CHANGES&quot;&gt;1.13.10&lt;/a&gt;版本，其最主要更新功能点莫过于支持 gRPC 服务代理，即新增的模块&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_grpc_module.html&quot;&gt;ngx_http_grpc_module&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这意味着可以很容易复用 Nginx 现有基础设施，简单几步即可构建出高可用的 gRPC 服务端集群，具体构建概要如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="https://kwanhur.com/tags/nginx/"/>
    
      <category term="http2" scheme="https://kwanhur.com/tags/http2/"/>
    
      <category term="grpc" scheme="https://kwanhur.com/tags/grpc/"/>
    
  </entry>
  
</feed>
