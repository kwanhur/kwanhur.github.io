<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kwanhur&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/e3b2d60098a21065bf53abfb56968f72</icon>
  <subtitle>Focus on NFV SDN and DevOps</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kwanhur.com/"/>
  <updated>2022-04-09T16:02:06.603Z</updated>
  <id>https://kwanhur.com/</id>
  
  <author>
    <name>kwanhur</name>
    <email>huang_hua2012@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>build-imagemagick-libwebp-with-jpeg-turbo-from-source</title>
    <link href="https://kwanhur.com/2018/04/09/build-imagemagick-libwebp-with-jpeg-turbo-from-source/"/>
    <id>https://kwanhur.com/2018/04/09/build-imagemagick-libwebp-with-jpeg-turbo-from-source/</id>
    <published>2018-04-09T05:46:26.000Z</published>
    <updated>2022-04-09T16:02:06.603Z</updated>
    
    <content type="html"><![CDATA[<p>对于喜欢折腾的人，安装所需系统库都是手工源码编译出来使用，这或许有种可控的感觉。</p><p>相比直接使用软件库已编译好的，源码编译可更加自由选择或指定版本。</p><p>近期在CentOS-7.2系统上，升级webp图片依赖系统库时，整理了个一键编译ImageMagick脚本，如下：</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">head</span>  -n 1 /etc/redhat-release </span><br><span class="line"></span><br><span class="line">CentOS Linux release 7.2.1511 (Core) </span><br><span class="line"></span><br><span class="line">$ <span class="built_in">uname</span> -r</span><br><span class="line">3.10.0-327.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /export/svr /export/lib</span><br><span class="line">DIR=/export/svr</span><br><span class="line">PREFIX=/export/lib</span><br><span class="line"></span><br><span class="line">JPEG_VER=1.5.2</span><br><span class="line">PNG_VER=1.6.34</span><br><span class="line">GIF_VER=5.1.4</span><br><span class="line">WEBP_VER=0.6.1</span><br><span class="line">IMAGICK_VER=7.0.7-26</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span>.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  wget https://jaist.dl.sourceforge.net/project/libjpeg-turbo/<span class="variable">$JPEG_VER</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span>.tar.gz -O <span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span>.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  wget https://jaist.dl.sourceforge.net/project/libpng/libpng16/<span class="variable">$PNG_VER</span>/libpng-<span class="variable">$PNG_VER</span>.tar.gz -O <span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span>.tar.bz2 ];<span class="keyword">then</span></span><br><span class="line">  wget https://jaist.dl.sourceforge.net/project/giflib/giflib-<span class="variable">$GIF_VER</span>.tar.bz2 -O <span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span>.tar.bz2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span>.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  wget https://codeload.github.com/webmproject/libwebp/tar.gz/v<span class="variable">$WEBP_VER</span> -O <span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$PREFIX</span>/ImageMagick-<span class="variable">$IMAGICK_VER</span>.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  wget https://codeload.github.com/ImageMagick/ImageMagick/tar.gz/<span class="variable">$IMAGICK_VER</span> -O <span class="variable">$PREFIX</span>/ImageMagick-<span class="variable">$IMAGICK_VER</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$PREFIX</span></span><br><span class="line"><span class="built_in">rm</span> -fr libjpeg-turbo-<span class="variable">$JPEG_VER</span> libpng-<span class="variable">$PNG_VER</span> giflib-<span class="variable">$GIF_VER</span> libwebp-<span class="variable">$WEBP_VER</span> ImageMagick-<span class="variable">$IMAGICK_VER</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#base package</span></span><br><span class="line">yum install -y -q libtool libtool-ltdl libtool-ltdl-devel gcc make autoconf automake readline-devel nasm</span><br><span class="line"></span><br><span class="line"><span class="comment">#libjpeg-turbo</span></span><br><span class="line"><span class="built_in">unlink</span> <span class="variable">$PREFIX</span>/libjpeg-turbo</span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span></span><br><span class="line">make clean &gt;/dev/null</span><br><span class="line">./configure --prefix=<span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span> &amp;&amp; make -j24 &amp;&amp; make -j24 install</span><br><span class="line"><span class="built_in">ln</span> -sfnv <span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span> <span class="variable">$PREFIX</span>/libjpeg-turbo</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> $? -eq 0 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;install_status libjpeg-turbo OK&quot;</span>||<span class="built_in">echo</span> <span class="string">&quot;install_status libjpeg-turbo failed&quot;</span></span><br><span class="line">sudo <span class="built_in">cp</span> -a <span class="variable">$PREFIX</span>/libjpeg-turbo/lib/pkgconfig/*.pc /usr/lib64/pkgconfig/</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PREFIX</span>/libjpeg-turbo/lib&quot;</span> &gt; /etc/ld.so.conf.d/jpeg-turbo.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#libpng</span></span><br><span class="line"><span class="built_in">unlink</span> <span class="variable">$PREFIX</span>/libpng</span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span>/libpng-<span class="variable">$PNG_VER</span></span><br><span class="line">make clean &gt;/dev/null</span><br><span class="line">./configure --prefix=<span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span> &amp;&amp; make -j24 &amp;&amp; make -j24 install</span><br><span class="line"><span class="built_in">ln</span> -sfnv <span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span> <span class="variable">$PREFIX</span>/libpng</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> $? -eq 0 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;install_status libpng OK&quot;</span>||<span class="built_in">echo</span> <span class="string">&quot;install_status libpng failed&quot;</span></span><br><span class="line">sudo <span class="built_in">cp</span> -a <span class="variable">$PREFIX</span>/libpng/lib/pkgconfig/*.pc /usr/lib64/pkgconfig/</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PREFIX</span>/libpng/lib&quot;</span> &gt; /etc/ld.so.conf.d/libpng.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#giflib</span></span><br><span class="line"><span class="built_in">unlink</span> <span class="variable">$PREFIX</span>/giflib</span><br><span class="line"><span class="built_in">rm</span> -fr <span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span>/giflib-<span class="variable">$GIF_VER</span></span><br><span class="line">make clean &gt;/dev/null</span><br><span class="line">./configure --prefix=<span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span> &amp;&amp; make -j24 &amp;&amp; make install</span><br><span class="line"><span class="built_in">ln</span> -sfnv <span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span> <span class="variable">$PREFIX</span>/giflib </span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> $? -eq 0 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;install_status giflib OK&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;install_status giflib failed&quot;</span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PREFIX</span>/giflib/lib&quot;</span> &gt; /etc/ld.so.conf.d/giflib.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#libwebp</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span>/libwebp-<span class="variable">$WEBP_VER</span></span><br><span class="line">make clean &gt;/dev/null</span><br><span class="line"><span class="built_in">unlink</span> <span class="variable">$PREFIX</span>/libwebp</span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span></span><br><span class="line">./configure --prefix=<span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span> --enable-everything --disable-tiff --disable-wic \</span><br><span class="line">--with-gifincludedir=<span class="variable">$PREFIX</span>/giflib/include --with-giflibdir=<span class="variable">$PREFIX</span>/giflib/lib \</span><br><span class="line">--with-jpegincludedir=<span class="variable">$PREFIX</span>/libjpeg-turbo/include --with-jpeglibdir=<span class="variable">$PREFIX</span>/libjpeg-turbo/lib \</span><br><span class="line">--with-pngincludedir=<span class="variable">$PREFIX</span>/libpng/include --with-pnglibdir=<span class="variable">$PREFIX</span>/libpng/lib &amp;&amp; make -j24 &amp;&amp; make install</span><br><span class="line"><span class="built_in">ln</span> -sfnv <span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span> <span class="variable">$PREFIX</span>/libwebp</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> $? -eq 0 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;install_status libwebp OK&quot;</span>||<span class="built_in">echo</span> <span class="string">&quot;install_status libwebp failed&quot;</span></span><br><span class="line">sudo <span class="built_in">cp</span> -a <span class="variable">$PREFIX</span>/libwebp/lib/pkgconfig/*.pc /usr/lib64/pkgconfig/</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PREFIX</span>/libwebp/lib&quot;</span> &gt; /etc/ld.so.conf.d/libwebp.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#webp support yes</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span>/ImageMagick-<span class="variable">$IMAGICK_VER</span></span><br><span class="line"><span class="built_in">unlink</span> <span class="variable">$PREFIX</span>/imagemagick</span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$PREFIX</span>/imagemagick-<span class="variable">$IMAGICK_VER</span></span><br><span class="line">make clean &gt;/dev/null </span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG=/usr/bin/pkg-config</span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">&quot;-I<span class="variable">$PREFIX</span>/libjpeg-turbo/include&quot;</span></span><br><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">&quot;-L<span class="variable">$PREFIX</span>/libjpeg-turbo/lib&quot;</span></span><br><span class="line">./configure --prefix=<span class="variable">$PREFIX</span>/imagemagick-<span class="variable">$IMAGICK_VER</span> --enable-static --enable-shared  --disable-docs  \</span><br><span class="line">--with-modules --with-webp=<span class="built_in">yes</span> --disable-openmp --enable-delegate-build &amp;&amp; make -j 24 &amp;&amp; make install</span><br><span class="line"><span class="built_in">ln</span> -sfnv <span class="variable">$PREFIX</span>/imagemagick-<span class="variable">$IMAGICK_VER</span> <span class="variable">$PREFIX</span>/imagemagick</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> $? -eq 0 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;install_status imagemagick OK&quot;</span>||<span class="built_in">echo</span> <span class="string">&quot;install_status imagemagick failed&quot;</span></span><br><span class="line">sudo <span class="built_in">cp</span> -a <span class="variable">$PREFIX</span>/imagemagick/lib/pkgconfig/*.pc /usr/lib64/pkgconfig/</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PREFIX</span>/imagemagick/lib&quot;</span> &gt; /etc/ld.so.conf.d/imagemagick.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#pacakge imagemagick with dependent libraries</span></span><br><span class="line">VERSION=7.0.7-26</span><br><span class="line">LIB_PKG=/usr/lib64/pkgconfig</span><br><span class="line">LD_CONF=/etc/ld.so.conf.d</span><br><span class="line"></span><br><span class="line">tar -jPcf imagemagick-<span class="variable">$VERSION</span>.tar.bz2 <span class="variable">$PREFIX</span>/imagemagick <span class="variable">$PREFIX</span>/imagemagick-7.0.7-26 <span class="variable">$PREFIX</span>/giflib \</span><br><span class="line"><span class="variable">$PREFIX</span>/giflib-<span class="variable">$GIF_VER</span> <span class="variable">$PREFIX</span>/libpng <span class="variable">$PREFIX</span>/libpng-<span class="variable">$PNG_VER</span> <span class="variable">$PREFIX</span>/libwebp <span class="variable">$PREFIX</span>/libwebp-<span class="variable">$WEBP_VER</span> \</span><br><span class="line"><span class="variable">$PREFIX</span>/libjpeg-turbo <span class="variable">$PREFIX</span>/libjpeg-turbo-<span class="variable">$JPEG_VER</span> \</span><br><span class="line"><span class="variable">$LIB_PKG</span>/ImageMagick-7.Q16HDRI.pc <span class="variable">$LIB_PKG</span>/ImageMagick.pc <span class="variable">$LIB_PKG</span>/Magick++-7.Q16HDRI.pc <span class="variable">$LIB_PKG</span>/MagickCore-7.Q16HDRI.pc \</span><br><span class="line"><span class="variable">$LIB_PKG</span>/MagickCore.pc <span class="variable">$LIB_PKG</span>/Magick++.pc <span class="variable">$LIB_PKG</span>/MagickWand-7.Q16HDRI.pc <span class="variable">$LIB_PKG</span>/MagickWand.pc <span class="variable">$LIB_PKG</span>/libwebpdecoder.pc \</span><br><span class="line"><span class="variable">$LIB_PKG</span>/libwebpdemux.pc <span class="variable">$LIB_PKG</span>/libwebpmux.pc <span class="variable">$LIB_PKG</span>/libwebp.pc <span class="variable">$LIB_PKG</span>/libjpeg.pc <span class="variable">$LIB_PKG</span>/libturbojpeg.pc \</span><br><span class="line"><span class="variable">$LD_CONF</span>/jpeg-turbo.conf <span class="variable">$LD_CONF</span>/libwebp.conf <span class="variable">$LD_CONF</span>/imagemagick.conf <span class="variable">$LD_CONF</span>/giflib.conf <span class="variable">$LD_CONF</span>/libpng.conf</span><br></pre></td></tr></table></figure><p>通过该系统库，完美适配 <a href="https://github.com/kwanhur/lua-resty-imagick">lua-resty-imagick</a> :)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于喜欢折腾的人，安装所需系统库都是手工源码编译出来使用，这或许有种可控的感觉。&lt;/p&gt;
&lt;p&gt;相比直接使用软件库已编译好的，源码编译可更加自由选择或指定版本。&lt;/p&gt;
&lt;p&gt;近期在CentOS-7.2系统上，升级webp图片依赖系统库时，整理了个一键编译ImageMagick脚本，如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="lua" scheme="https://kwanhur.com/tags/lua/"/>
    
      <category term="webp" scheme="https://kwanhur.com/tags/webp/"/>
    
      <category term="imagemagick" scheme="https://kwanhur.com/tags/imagemagick/"/>
    
  </entry>
  
  <entry>
    <title>nginx-http2-grpc</title>
    <link href="https://kwanhur.com/2018/03/23/nginx-http2-grpc/"/>
    <id>https://kwanhur.com/2018/03/23/nginx-http2-grpc/</id>
    <published>2018-03-23T08:43:36.000Z</published>
    <updated>2022-04-09T16:03:36.201Z</updated>
    
    <content type="html"><![CDATA[<p>NGINX官方已发布<a href="http://nginx.org/en/CHANGES">1.13.10</a>版本，其最主要更新功能点莫过于支持gRPC服务代理，即新增的模块<a href="http://nginx.org/en/docs/http/ngx_http_grpc_module.html">ngx_http_grpc_module</a>。</p><p>这意味着可以很容易复用Nginx现有基础设施，简单几步即可构建出高可用的gRPC服务端集群，具体构建概要如下：</p><span id="more"></span><blockquote><p>搭建go-grpc服务，参见 <a href="https://grpc.io/docs/quickstart/go.html">https://grpc.io/docs/quickstart/go.html</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/google.golang.org/grpc/examples/helloworld</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务端，默认端口50051</span></span><br><span class="line">$ go run greeter_server/main.go</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试客户端</span></span><br><span class="line">$ go run greeter_client/main.go</span><br><span class="line"></span><br><span class="line"><span class="comment">#交互成功可见输出结果</span></span><br><span class="line">Greeting: Hello world</span><br></pre></td></tr></table></figure><blockquote><p>搭建nginx-grpc代理</p><blockquote><p>nginx构建支持http2+grpc</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://nginx.org/download/nginx-1.13.10.tar.gz -O /tmp/nginx-1.13.10.tar.gz</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /tmp &amp;&amp; tar xzf nginx-1.13.10.tar.gz &amp;&amp; <span class="built_in">cd</span> nginx-1.13.10</span><br><span class="line"></span><br><span class="line">$ ./configure --with-http_ssl_module --with-http_v2_module &amp;&amp; make -j4 &amp;&amp; make install &amp;&amp; /usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>配置nginx支持grpc代理</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#vhosts/grpc.conf 配置demo文件</span><br><span class="line">upstream grpc.server&#123;</span><br><span class="line">    server 127.0.0.1:50051;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 http2;</span><br><span class="line">    access_log grpc.access.log main;</span><br><span class="line">        </span><br><span class="line">    location / &#123;</span><br><span class="line">        grpc_pass grpc.server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>从上述简单的配置可看出，grpc模块可以和upstream模块结合使用，这意味着可复用upstream模块<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html">高可用配置</a>,<br>当然，grpc模块也提供类似配置，如<a href="http://nginx.org/en/docs/http/ngx_http_grpc_module.html#grpc_next_upstream">grpc_next_upstream</a>等。</p></blockquote></blockquote><blockquote><blockquote><p>启动nginx代理服务</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /usr/local/nginx/sbin/nginx -t &amp;&amp; sudo /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><blockquote><p>grpc服务测验</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/google.golang.org/grpc/examples/helloworld</span><br><span class="line"></span><br><span class="line"><span class="comment">#！注意修改客户端连接服务端口为80</span></span><br><span class="line">$ go run greeter_client/main.go</span><br><span class="line"></span><br><span class="line"><span class="comment">#交互成功可见输出结果</span></span><br><span class="line">Greeting: Hello world</span><br><span class="line"><span class="comment">#nginx 访问日志可见输出</span></span><br><span class="line">127.0.0.1 - - [23/Mar/2018:17:21:10 +0800] <span class="string">&quot;POST /helloworld.Greeter/SayHello HTTP/2.0&quot;</span> 200 18 <span class="string">&quot;-&quot;</span> <span class="string">&quot;grpc-go/1.11.0-dev&quot;</span> <span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure><p>总体可见，通过nginx可以很轻松的构建出高可用的grpc服务代理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NGINX官方已发布&lt;a href=&quot;http://nginx.org/en/CHANGES&quot;&gt;1.13.10&lt;/a&gt;版本，其最主要更新功能点莫过于支持gRPC服务代理，即新增的模块&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_grpc_module.html&quot;&gt;ngx_http_grpc_module&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这意味着可以很容易复用Nginx现有基础设施，简单几步即可构建出高可用的gRPC服务端集群，具体构建概要如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="https://kwanhur.com/tags/nginx/"/>
    
      <category term="http2" scheme="https://kwanhur.com/tags/http2/"/>
    
      <category term="grpc" scheme="https://kwanhur.com/tags/grpc/"/>
    
  </entry>
  
</feed>
